/* Auto-generated by genmsg_cpp for file /home/redfox/Desktop/CDIO/msg/circle_msg.msg */
#ifndef CDIO_MESSAGE_CIRCLE_MSG_H
#define CDIO_MESSAGE_CIRCLE_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace CDIO
{
template <class ContainerAllocator>
struct circle_msg_ {
  typedef circle_msg_<ContainerAllocator> Type;

  circle_msg_()
  : centerX(0.0)
  , centerY(0.0)
  , radius(0)
  {
  }

  circle_msg_(const ContainerAllocator& _alloc)
  : centerX(0.0)
  , centerY(0.0)
  , radius(0)
  {
  }

  typedef double _centerX_type;
  double centerX;

  typedef double _centerY_type;
  double centerY;

  typedef int32_t _radius_type;
  int32_t radius;


  typedef boost::shared_ptr< ::CDIO::circle_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CDIO::circle_msg_<ContainerAllocator>  const> ConstPtr;
}; // struct circle_msg
typedef  ::CDIO::circle_msg_<std::allocator<void> > circle_msg;

typedef boost::shared_ptr< ::CDIO::circle_msg> circle_msgPtr;
typedef boost::shared_ptr< ::CDIO::circle_msg const> circle_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::CDIO::circle_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::CDIO::circle_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace CDIO

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CDIO::circle_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CDIO::circle_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CDIO::circle_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b999b3bc2ae701b533430a967d74b94";
  }

  static const char* value(const  ::CDIO::circle_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0b999b3bc2ae701bULL;
  static const uint64_t static_value2 = 0x533430a967d74b94ULL;
};

template<class ContainerAllocator>
struct DataType< ::CDIO::circle_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CDIO/circle_msg";
  }

  static const char* value(const  ::CDIO::circle_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CDIO::circle_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 centerX\n\
float64 centerY\n\
int32 radius\n\
\n\
";
  }

  static const char* value(const  ::CDIO::circle_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CDIO::circle_msg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CDIO::circle_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.centerX);
    stream.next(m.centerY);
    stream.next(m.radius);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct circle_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::CDIO::circle_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::CDIO::circle_msg_<ContainerAllocator> & v) 
  {
    s << indent << "centerX: ";
    Printer<double>::stream(s, indent + "  ", v.centerX);
    s << indent << "centerY: ";
    Printer<double>::stream(s, indent + "  ", v.centerY);
    s << indent << "radius: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radius);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CDIO_MESSAGE_CIRCLE_MSG_H

