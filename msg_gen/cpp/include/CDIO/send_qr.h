/* Auto-generated by genmsg_cpp for file /home/redfox/Desktop/CDIO/msg/send_qr.msg */
#ifndef CDIO_MESSAGE_SEND_QR_H
#define CDIO_MESSAGE_SEND_QR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace CDIO
{
template <class ContainerAllocator>
struct send_qr_ {
  typedef send_qr_<ContainerAllocator> Type;

  send_qr_()
  : qr_value()
  {
  }

  send_qr_(const ContainerAllocator& _alloc)
  : qr_value(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _qr_value_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  qr_value;


  typedef boost::shared_ptr< ::CDIO::send_qr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CDIO::send_qr_<ContainerAllocator>  const> ConstPtr;
}; // struct send_qr
typedef  ::CDIO::send_qr_<std::allocator<void> > send_qr;

typedef boost::shared_ptr< ::CDIO::send_qr> send_qrPtr;
typedef boost::shared_ptr< ::CDIO::send_qr const> send_qrConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::CDIO::send_qr_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::CDIO::send_qr_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace CDIO

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CDIO::send_qr_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CDIO::send_qr_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CDIO::send_qr_<ContainerAllocator> > {
  static const char* value() 
  {
    return "758a1ea8398e60ee51c78ecf4c697c80";
  }

  static const char* value(const  ::CDIO::send_qr_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x758a1ea8398e60eeULL;
  static const uint64_t static_value2 = 0x51c78ecf4c697c80ULL;
};

template<class ContainerAllocator>
struct DataType< ::CDIO::send_qr_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CDIO/send_qr";
  }

  static const char* value(const  ::CDIO::send_qr_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CDIO::send_qr_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string qr_value\n\
\n\
";
  }

  static const char* value(const  ::CDIO::send_qr_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CDIO::send_qr_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.qr_value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct send_qr_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::CDIO::send_qr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::CDIO::send_qr_<ContainerAllocator> & v) 
  {
    s << indent << "qr_value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.qr_value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CDIO_MESSAGE_SEND_QR_H

